/* --------------------
 * livepack module
 * Babel plugin visitor
 * ------------------*/

'use strict';

// Modules
const pathJoin = require('path').join,
	{ensureStatementsHoisted} = require('@babel/helper-module-transforms'),
	t = require('@babel/types');

// Imports
const {
		recordVarUse, createTrackerComment, enterBlock, createBlockId,
		internalIdentifier, tagTempVarWithType, createParentVarBindingBlockPath,
		assertWithLocation
	} = require('./utils.js'),
	{
		initInternalVars, checkInternalVarNameClash,
		createTrackerVarNode, createGetScopeIdVarNode, createTempVarNode,
		createEvalVarNode, createPrevalVarNode, createGetEvalVarNode,
		getInternalVarsPrefixNum, getEvalVarName,
		addToInternalVars, renameInternalVars
	} = require('./internalVars.js'),
	{
		TRACKER_VAR_NODE, GET_SCOPE_ID_VAR_NODE, SCOPE_ID_VAR_NODE, TEMP_VAR_NODES,
		BLOCK_ID, EVAL_IS_USED, PARENT_VARS, IS_EVAL_CODE, IS_COMMON_JS,
		FUNCTION_PROPS, HAS_CONSTRUCTOR, IS_STRICT, PARENT_IS_STRICT,
		PROGRAM_PATH, PARENT_FUNCTION_PATH, PARENT_FULL_FUNCTION_PATH,
		SUPER_VAR_NODE, TOP_LEVEL_VAR_NAMES, IS_INTERNAL
	} = require('./symbols.js'),
	{
		identifierIsVariable, replaceWith, isInternalPath, addComments, isReservedWord
	} = require('../shared/functions.js'),
	{COMMON_JS_LOCAL_VAR_NAMES, TRANSFORMED_COMMENT, EVAL_COMMENT} = require('../shared/constants.js');

// Constants
const INIT_PATH = pathJoin(__dirname, '../init/index.js'),
	EVAL_PATH = pathJoin(__dirname, '../init/eval.js'),
	TOP_BLOCK_ID = 1,
	COMMON_JS_VARS = new Set(COMMON_JS_LOCAL_VAR_NAMES);

// Exports

/**
 * Visitor to add tracking to program.
 * Traverses entire AST tree.
 * @param {Object} programPath - Babel path object for program
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
module.exports = function(programPath, state) {
	// Avoid adding tracking code to livepack's own codebase
	const {filename} = state.file.opts;
	if (filename && isInternalPath(filename)) return;

	// Determine if this is `eval`ed code
	const isEval = !!state[BLOCK_ID];

	// Prepare for traversal
	programEnterVisitor(programPath, state);

	// Traverse AST tree
	programPath.traverse({
		Class: {
			enter: path => classEnterVisitor(path, state),
			exit: path => classExitVisitor(path, state)
		},
		Function: {
			enter: path => functionEnterVisitor(path, state),
			exit: path => functionExitVisitor(path, state)
		},
		For: forOrWhileVisitor,
		While: forOrWhileVisitor,
		BlockStatement: {
			enter: path => blockStatementEnterVisitor(path, state),
			exit: path => blockStatementExitVisitor(path, state)
		},
		Identifier: path => identifierVisitor(path, state),
		ThisExpression: path => thisExpressionVisitor(path, state),
		Super: path => superVisitor(path, state)
	});

	// Insert tracker + init statements at top of file
	programExitVisitor(programPath, state, isEval);
};

/**
 * Visitor to determine var names for tracker and scopeId vars in this file.
 * @param {Object} path - Babel path object for program
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function programEnterVisitor(path, state) {
	// Init block ID counter, parent vars object, and eval flag
	// (these will be pre-defined if this is code generated by `eval()`)
	if (!state[BLOCK_ID]) {
		state[BLOCK_ID] = TOP_BLOCK_ID;
		state[PARENT_VARS] = Object.create(null);
		state[IS_EVAL_CODE] = false;
		state[IS_COMMON_JS] = state.file.opts.sourceType === 'script';
		state[IS_STRICT] = false;
	}

	// Create nodes for tracker + getScopeId vars, and init array to track invalid names
	initInternalVars(state);
	state[TRACKER_VAR_NODE] = createTrackerVarNode(state);
	state[GET_SCOPE_ID_VAR_NODE] = createGetScopeIdVarNode(state);

	// Record program path
	state[PROGRAM_PATH] = path;

	// Init parent function state vars
	state[PARENT_FUNCTION_PATH] = null;
	state[PARENT_FULL_FUNCTION_PATH] = null;

	// Init set of top level var names
	state[TOP_LEVEL_VAR_NAMES] = new Set();

	// Init eval usage flag
	state[EVAL_IS_USED] = false;

	// Set strict mode flag if 'use strict' directive
	if (path.node.directives.some(directiveNode => directiveNode.value.value === 'use strict')) {
		state[IS_STRICT] = true;
	}

	// Set block ID
	enterBlock(path, state);
}

/**
 * Visitor to insert tracker + init statements at top of file.
 * @param {Object} path - Babel path object for program
 * @param {Object} state - Babel state object for file
 * @param {boolean} isEval - `true` if is code produced by `eval()`
 * @returns {undefined}
 */
function programExitVisitor(path, state, isEval) {
	// Insert `const livepack_scopeId_1 = livepack_tracker();` at top of file if file scope referenced
	blockStatementExitVisitor(path, state);

	// Insert `init` + `eval` import statements at top of file
	if (!isEval) insertImportStatements(path, state);

	// Rename internal vars so they don't clash with existing vars
	renameInternalVars(state);
}

function insertImportStatements(path, state) {
	// Insert init import statement at top of file (above `scopeId` definition)
	// eslint-disable-next-line max-len
	// `const [livepack_tracker, livepack_getScopeId] = require('/path/to/app/node_modules/livepack/lib/init/index.js')(__filename, module, require);`
	const statementNodes = [
		t.variableDeclaration(
			'const', [
				t.variableDeclarator(
					t.arrayPattern([state[TRACKER_VAR_NODE], state[GET_SCOPE_ID_VAR_NODE]]),
					t.callExpression(
						t.callExpression(internalIdentifier('require'), [t.stringLiteral(INIT_PATH)]),
						[t.identifier('__filename'), t.identifier('module'), t.identifier('require')]
					)
				)
			]
		)
	];

	// Insert eval import statement at top of file
	if (state[EVAL_IS_USED]) {
		statementNodes.push(
			t.variableDeclaration(
				'const', [
					t.variableDeclarator(
						t.arrayPattern([
							createEvalVarNode(state),
							createPrevalVarNode(state),
							createGetEvalVarNode(state)
						]),
						t.callExpression(
							t.callExpression(internalIdentifier('require'), [t.stringLiteral(EVAL_PATH)]),
							[
								t.identifier('__filename'),
								t.numericLiteral(state[BLOCK_ID]),
								t.numericLiteral(getInternalVarsPrefixNum(state))
							]
						)
					)
				]
			)
		);
	}

	// Insert `/*livepack_babel_transformed*/` comment at top of file
	addComments(path.node, false, false, {
		type: 'CommentBlock',
		value: TRANSFORMED_COMMENT
	});

	// Ensure these headers remain above headers added by @babel/plugin-transform-modules-commonjs
	ensureStatementsHoisted(statementNodes);

	path.unshiftContainer('body', statementNodes);
}

/**
 * Visitor to init `HAS_CONSTRUCTOR` flag + set `IS_STRICT` flag.
 * @param {Object} classPath - Babel path object for class
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function classEnterVisitor(classPath, state) {
	classPath[HAS_CONSTRUCTOR] = false;

	// Classes are always strict mode
	classPath[PARENT_IS_STRICT] = state[IS_STRICT];
	state[IS_STRICT] = true;
}

/**
 * Visitor to amend classes with no constructor.
 * If is subclass, create blank constructor. Otherwise, add tracker comment.
 * Blank constructor for subclasses is required to track super.
 * @param {Object} classPath - Babel path object for class
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function classExitVisitor(classPath, state) {
	// Revert `IS_STRICT` back to as was before entering class
	state[IS_STRICT] = classPath[PARENT_IS_STRICT];

	// If class has constructor, exit - `functionExitVisitor()` has already inserted tracker comment
	if (classPath[HAS_CONSTRUCTOR]) return;

	const classNode = classPath.node;
	if (classNode.superClass) {
		// Class extends a super class and has no constructor - create one.
		// NB `functionExitVisitor()` will insert tracker comment after `extends`.
		classPath.get('body').pushContainer('body', t.classMethod(
			'constructor',
			t.identifier('constructor'),
			[t.restElement(t.identifier('args'))],
			t.blockStatement([
				t.expressionStatement(t.callExpression(t.super(), [t.spreadElement(t.identifier('args'))]))
			])
		));
	} else {
		// No constructor - make tracker comment indicating no scope vars to capture
		addComments(classNode.body, true, false, createTrackerComment(
			createBlockId(state), [], true, false, false, undefined, false, state
		));
	}
}

/**
 * Visitor to init scope + state for function.
 * @param {Object} fnPath - Babel path object for function
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function functionEnterVisitor(fnPath, state) {
	// If arrow function with no body statement block, convert into block.
	// This is necessary so there's a block to put tracking code into.
	// `x => x` -> `(x) => { return x; }`
	let bodyPath = fnPath.get('body');
	if (!bodyPath.isBlockStatement()) {
		bodyPath.replaceWith(
			t.blockStatement([
				t.returnStatement(bodyPath.node)
			])
		);
		bodyPath = fnPath.get('body');
	}

	// Record if parent is strict.
	// NB Whether this function itself is strict node will be recorded on entering the body block
	// to avoid affecting any functions in dynamic method key if this is a method.
	// NB Don't need to worry about functions defined within this function's params, as that would
	// require deconstruction or param defaults. Neither of these is possible as it's a syntax error
	// to have a 'use strict' directive in a function with non-simple params.
	const isStrict = state[IS_STRICT];
	fnPath[PARENT_IS_STRICT] = isStrict;

	// Init block on function body
	const blockId = enterBlock(bodyPath, state);

	// Init functions props
	fnPath[FUNCTION_PROPS] = {id: blockId, scopes: new Map(), isStrict, superVarNode: undefined};

	// Update parent functions
	fnPath[PARENT_FUNCTION_PATH] = state[PARENT_FUNCTION_PATH];
	fnPath[PARENT_FULL_FUNCTION_PATH] = state[PARENT_FULL_FUNCTION_PATH];
	state[PARENT_FUNCTION_PATH] = fnPath;
	if (!fnPath.isArrowFunctionExpression()) state[PARENT_FULL_FUNCTION_PATH] = fnPath;
}

/**
 * Exit visitor to add tracking comment + code to functions.
 * @param {Object} fnPath - Babel path object for function
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function functionExitVisitor(fnPath, state) {
	// Get function info
	const props = fnPath[FUNCTION_PROPS];
	const scopes = [...props.scopes.values()]
		.sort((a, b) => (a.blockId > b.blockId ? 1 : -1)); // Sort by block ID in ascending order

	const {superVarNode} = props;
	let superVarName,
		superIsTemp = false;
	if (superVarNode) {
		superVarName = superVarNode.name;
		if (superVarNode[IS_INTERNAL]) superIsTemp = true;
	}

	// Determine where to insert tracker comment:
	// - Class constructors where class extends another class: Before super class expression
	//   (i.e. after `extends`, in case `extends` clause contains another class / function)
	// - Class constructors where class does not extend another class: At start of class body
	// - Methods with computed key: Before key
	//   (in case key contains another function, so outer function's tracker comment comes first)
	// - All other cases: Inside `livepackTracker()` call
	const fnNode = fnPath.node;
	let isMethod = false,
		isProtoMethod = false,
		commentHolderNode,
		isInner = false;
	if (fnNode.kind === 'constructor') { // Class constructor
		const classBodyPath = fnPath.parentPath,
			classPath = classBodyPath.parentPath,
			extendsNode = classPath.node.superClass;
		if (extendsNode) {
			commentHolderNode = extendsNode;
		} else {
			commentHolderNode = classBodyPath.node;
			isInner = true;
		}

		classPath[HAS_CONSTRUCTOR] = true;
	} else if (fnPath.isMethod()) {
		isMethod = true;
		if (fnPath.isClassMethod() && !fnNode.static) isProtoMethod = true;
		if (fnNode.computed) commentHolderNode = fnNode.key;
	}

	// Insert tracker code in function params
	// `livepackTracker(() => [[scopeId_1, x, y]])`
	const trackerFnNode = t.arrowFunctionExpression([], t.arrayExpression(
		scopes.map(({scopeIdVarNode, varNames}) => (
			t.arrayExpression([
				scopeIdVarNode,
				...[...varNames].map(name => (
					superIsTemp && name === superVarName ? superVarNode : internalIdentifier(name)
				))
			])
		))
	));
	const trackerNode = t.callExpression(state[TRACKER_VAR_NODE], [trackerFnNode]);
	insertTrackerNode(fnPath, trackerNode, state);

	// Insert tracker comment
	addComments(commentHolderNode || trackerFnNode, isInner, false, createTrackerComment(
		props.id, scopes, props.isStrict, isMethod, isProtoMethod, superVarName, superIsTemp, state
	));

	// Revert function vars back to as was before entering function
	state[PARENT_FUNCTION_PATH] = fnPath[PARENT_FUNCTION_PATH];
	state[PARENT_FULL_FUNCTION_PATH] = fnPath[PARENT_FULL_FUNCTION_PATH];
	state[IS_STRICT] = fnPath[PARENT_IS_STRICT];
}

/**
 * Insert tracker into function.
 * Intent is to place tracker as close to start of code as possible to ensure:
 * 1. No code is evaluated prior to tracker being executed.
 * 2. If parameters reference external vars, tracker is outside function body and so can access them.
 *
 * Tracker is added to first modifiable parameter.
 * If no modifiable parameters, falls back to placing in function body.
 * Tracker is placed so that it does not alter normal operation of function, and does not
 * alter function signature (`.length` property).
 *
 * Parameters of the following kinds cannot be modified:
 * 1. Simple params e.g. `x` (converting to `x = livepack_tracker()` would alter function's `.length`)
 * 2. Rest element with simple argument e.g. `...x` (no valid way to insert a default)
 * 3. Object/Array destructuring with first element being rest with simple argument
 *    e.g. `{...x}`, `[...x]`
 *    (converting to `{...x} = livepack_tracker()` would alter `.length` and no way to insert a default)
 * 4. Object/Array destructuring repeated e.g. `{...{...x}}` `[...{...x}]` (same reason as previous)
 *
 * @param {Object} fnPath - Babel path object for function
 * @param {Object} trackerNode - AST node for `livepack_tracker()` call
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function insertTrackerNode(fnPath, trackerNode, state) {
	const fnNode = fnPath.node;
	const trackerIsAddedToParams = fnNode.params.some((_, paramIndex) => {
		let path = fnPath.get(`params.${paramIndex}`);
		if (path.isRestElement()) path = path.get('argument');

		let canAddDefault = false;
		while (true) { // eslint-disable-line no-constant-condition
			let {node} = path;
			const {type} = node;
			if (type === 'AssignmentPattern') {
				// `x = 1` => `x = livepack_tracker() || 1`
				node.right = t.logicalExpression('||', trackerNode, node.right);
				return true;
			}

			assertWithLocation(
				type === 'Identifier' || type === 'ArrayPattern' || type === 'ObjectPattern', path, state,
				`Unexpected function param type ${type}`
			);

			if (canAddDefault) {
				// `x` => `x = livepack_tracker()` / `{a: 1} => `{a: 1} = livepack_tracker()`
				replaceWith(path, t.assignmentPattern(node, trackerNode));
				return true;
			}

			if (type === 'Identifier') return false;

			path = path.get(type === 'ArrayPattern' ? 'elements.0' : 'properties.0');
			if (!path) return false;
			if (path.isRestElement()) {
				canAddDefault = false;
				path = path.get('argument');
			} else {
				if (type === 'ObjectPattern') {
					node = path.node;
					let keyNode = node.key;
					if (!node.computed) {
						if (t.isIdentifier(keyNode)) keyNode = t.stringLiteral(keyNode.name);
						node.computed = true;
						node.shorthand = false;
					}
					node.key = t.logicalExpression('||', trackerNode, keyNode);
					return true;
				}
				canAddDefault = true;
			}
		}
	});

	if (!trackerIsAddedToParams) {
		// Insert tracker at start of function body
		fnNode.body.body.unshift(t.expressionStatement(trackerNode));
	}
}

/**
 * Visitor to convert `for` and `while` / `do while` with single statement to statement block.
 * This is in case:
 *
 * `for`: variables defined in the init node are referenced in functions created in the body,
 * in which case a scope var statement will need to be inserted.
 * `for (const x of [1, 2, 3]) fns.push(() => x);` -> `for (const x of [1, 2, 3]) { fns.push(() => x); }`
 *
 * `while` / `do while`: object or class with method using `super` defined in loop
 * and requires temp var scoped to inside loop.
 * e.g. `while (x) fn(class extends C {m() { super.m() }})`
 * `do fn(class extends C {m() { super.m() }}); while (x)`
 *
 * @param {Object} forOrWhilePath - Babel path object for `for` / `while` statement
 * @returns {undefined}
 */
function forOrWhileVisitor(forOrWhilePath) {
	const bodyPath = forOrWhilePath.get('body');
	if (!bodyPath.isBlockStatement()) bodyPath.replaceWith(t.blockStatement([bodyPath.node]));
}

/**
 * Visitor to set a block ID on every block.
 * @param {Object} blockPath - Babel path object for statement block
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function blockStatementEnterVisitor(blockPath, state) {
	const {parentPath} = blockPath;
	if (!parentPath.isFunction()) {
		// Only create block ID if not function body - `functionVisitor` will have created block ID already
		enterBlock(blockPath, state);
	} else if (
		!state[IS_STRICT]
		&& blockPath.node.directives.some(directiveNode => directiveNode.value.value === 'use strict')
	) {
		// Entering strict mode function
		state[IS_STRICT] = true;
		parentPath[FUNCTION_PROPS].isStrict = true;
	}
}

/**
 * Visitor to add `const scopeId_3 = livepack_getScopeId();` at start of block if block is a scope.
 * Also adds any temp var declarations to start of block.
 * @param {Object} blockPath - Babel path object for statement block
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function blockStatementExitVisitor(blockPath, state) {
	const scopeIdVarNode = blockPath[SCOPE_ID_VAR_NODE];
	if (!scopeIdVarNode) return;

	// Insert `const scopeId_3 = livepack_getScopeId();` statement at top of block
	const insertNodes = [
		t.variableDeclaration(
			'const', [
				t.variableDeclarator(
					scopeIdVarNode,
					t.callExpression(state[GET_SCOPE_ID_VAR_NODE], [])
				)
			]
		)
	];

	// Insert temp vars declaration at top of block
	const tempVarNodes = blockPath[TEMP_VAR_NODES];
	if (tempVarNodes) {
		insertNodes.push(
			t.variableDeclaration('let', tempVarNodes.map(node => t.variableDeclarator(node)))
		);
	}

	blockPath.unshiftContainer('body', insertNodes);
}

/**
 * Visitor to track a variable used which is in an upper scope.
 * @param {Object} identifierPath - Babel path object for identifer
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function identifierVisitor(identifierPath, state) {
	// Skip internally-created identifiers
	const {node, parentPath} = identifierPath;
	if (node[IS_INTERNAL]) return;

	// Skip identifiers not used as vars e.g. `{a: 1}`
	if (!identifierIsVariable(identifierPath)) return;

	// If var name could clash with internal var names, record this
	const {name} = node;
	checkInternalVarNameClash(name, state);

	// Find enclosing function
	let functionPath = state[PARENT_FUNCTION_PATH];
	if (!functionPath) {
		// If is top-level var declaration, record it.
		// This is a hack to work around Babel not seeing vars created by
		// `@babel/plugin-transform-modules-commonjs` when binding is searched for later.
		// `.scope.getBinding()` returns undefined. So catalog them here and use the list
		// to identify their scope when they're encountered later.
		// https://stackoverflow.com/questions/63508492/babels-path-unshiftcontainer-does-not-add-newly-created-vars-to-scope
		// TODO Find a better way to do this.
		if (
			parentPath.isVariableDeclarator() && identifierPath.key === 'id'
			&& parentPath.parentPath.parentPath.isProgram()
		) {
			state[TOP_LEVEL_VAR_NAMES].add(name);
			return;
		}

		// Shim `eval` in top level scope
		if (name === 'eval' && !identifierPath.scope.getBinding('eval')) processEval(identifierPath, state);

		return;
	}

	// If is method key (e.g. `{ [x]() {} }`), treat as used in parent function
	if (functionPath.isMethod() && functionPath.node.computed) {
		const methodKeyPath = functionPath.get('key');
		if (
			identifierPath === methodKeyPath
			|| identifierPath.findParent(
				path => path === methodKeyPath || path === functionPath
			) === methodKeyPath
		) {
			functionPath = functionPath[PARENT_FUNCTION_PATH];
			if (!functionPath) return;
		}
	}

	// Skip function's own name
	if (parentPath === functionPath && identifierPath.key === 'id') return;

	// Skip class's own name in constructor
	if (functionPath.node.kind === 'constructor') {
		const classPath = functionPath.parentPath.parentPath;
		assertWithLocation(
			classPath.isClass(), functionPath, state,
			`Unexpected class type from constructor '${classPath.node.type}'`
		);
		const classIdNode = classPath.node.id;
		if (classIdNode && classIdNode.name === identifierPath.node.name) return;
	}

	// Handle `arguments` where refers to implicit `arguments` var created by function.
	// NB In sloppy mode, `arguments` could also refer to an external user-defined var.
	const binding = identifierPath.scope.getBinding(name);
	if (name === 'arguments') {
		const fullFunctionPath = state[PARENT_FULL_FUNCTION_PATH];
		if (!binding || (fullFunctionPath && !binding.path.findParent(path => path === fullFunctionPath))) {
			processArguments(state);
			return;
		}
	}

	// Find scope where var is defined (i.e. `const`, `let`, `var`, `function` statement).
	// Skip if is global (no binding found).
	let bindingBlockPath, isConst;
	if (!binding) {
		if (state[TOP_LEVEL_VAR_NAMES].has(name)) {
			// Identify top-level vars
			bindingBlockPath = state[PROGRAM_PATH];
			isConst = true;
		} else {
			// Global var
			const parentVar = state[PARENT_VARS][name];
			if (parentVar) {
				// This is `eval`ed code and var is from scope outside `eval`.
				// Create synthetic binding block to be passed to `recordVarUse()`.
				bindingBlockPath = createParentVarBindingBlockPath(parentVar);
				isConst = parentVar.isConst;
			} else if (COMMON_JS_VARS.has(name)) {
				// Treat `exports` etc as external vars, not globals
				bindingBlockPath = state[PROGRAM_PATH];
				isConst = false;
			} else {
				if (name === 'eval') processEval(identifierPath, state);
				return;
			}
		}
	} else {
		// Skip if var not defined outside function where it's used
		const bindingPath = binding.path;
		if (bindingPath === functionPath || bindingPath.findParent(path => path === functionPath)) return;

		// Locate statement block containing var declaration
		({path: bindingBlockPath, isConst} = getBindingLocation(bindingPath, name, state));

		assertWithLocation(
			bindingBlockPath.isBlockStatement() || bindingBlockPath.isProgram(), bindingBlockPath, state,
			`Unexpected variable binding block type '${bindingBlockPath.node.type}' for var '${name}'`
		);
	}

	// Record variable use
	recordVarUse(name, functionPath, bindingBlockPath, isConst, state);
}

function getBindingLocation(bindingPath, name, state) {
	// TODO In sloppy mode, function declarations (but not class declarations)
	// are scoped to enclosing function body
	if (bindingPath.isFunctionDeclaration() || bindingPath.isClassDeclaration()) {
		// Function declaration
		// Traverse down past label prefix(es) e.g. `a: function x() {}`
		let bindingParentPath = bindingPath.parentPath;
		while (bindingParentPath.isLabeledStatement()) {
			bindingParentPath = bindingParentPath.parentPath;
		}
		return {path: bindingParentPath, isConst: false};
	}

	if (bindingPath.isFunctionExpression()) {
		// Function name - scoped to function body
		return {path: bindingPath.get('body'), isConst: true};
	}

	if (bindingPath.isCatchClause()) return {path: bindingPath.get('body'), isConst: false};

	const bindingParentPath = bindingPath.findParent(
		path => path.isVariableDeclaration() || path.isFunction()
	);
	if (bindingParentPath.isFunction()) {
		// Function parameter - scoped to function body
		assertWithLocation(
			bindingPath.isIdentifier() || bindingPath.isObjectPattern() || bindingPath.isArrayPattern()
				|| bindingPath.isAssignmentPattern() || bindingPath.isRestElement(),
			bindingPath, state,
			`Unexpected variable binding type '${bindingPath.node.type}' for var '${name}'`
		);

		return {path: bindingParentPath.get('body'), isConst: false};
	}

	// `var`, `const` or `let` statement
	assertWithLocation(
		bindingParentPath.isVariableDeclaration(),
		bindingParentPath, state,
		`Unexpected variable binding type '${bindingParentPath.node.type}' for var '${name}'`
	);

	// `var` statements are scoped to parent function
	const {kind} = bindingParentPath.node;
	if (kind === 'var') {
		const bindingFnPath = bindingParentPath.findParent(path => path.isFunction());
		if (bindingFnPath) return {path: bindingFnPath.get('body'), isConst: false};
		return {path: state[PROGRAM_PATH], isConst: false};
	}

	// `const` or `let` statement - scoped to block.
	// NB `const` + `let` statements cannot be labelled.
	let varParentPath = bindingParentPath.parentPath;
	if (varParentPath.isFor()) {
		// `for (const x = ...) {}` - var scoped to `for` statement block
		varParentPath = varParentPath.get('body');
	}

	return {path: varParentPath, isConst: kind === 'const'};
}

/**
 * Visitor to track use of `this` which refers to an upper scope.
 * Record the var same as for identifiers.
 * (only applies inside arrow functions)
 * @param {Object} thisPath - Babel path object for `this`
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function thisExpressionVisitor(thisPath, state) {
	processThisOrArguments('this', state);
}

/**
 * Visitor to track use of `super` in methods.
 * @param {Object} superPath - Babel path object for `super`
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function superVisitor(superPath, state) {
	// Find method `super` is in
	const fnPath = state[PARENT_FULL_FUNCTION_PATH];
	assertWithLocation(fnPath.isMethod(), fnPath, state);

	// Skip if another incidence of `super` in this method already encountered
	const fnProps = fnPath[FUNCTION_PROPS];
	if (fnProps.superVarNode) return;

	// Get var node for enclosing class/object
	const isClass = fnPath.isClassMethod(),
		encloserPath = isClass ? fnPath.parentPath.parentPath : fnPath.parentPath,
		encloserNode = encloserPath.node,
		blockPath = encloserPath.findParent(path => path.isBlockStatement() || path.isProgram());

	let varNode = encloserNode[SUPER_VAR_NODE];
	if (!varNode) {
		varNode = getEncloserVarNode(superPath, encloserPath, encloserNode, blockPath, isClass, state);
		encloserNode[SUPER_VAR_NODE] = varNode;
	}

	// Record var use (unless is class name in class constructor where it acts as an internal var)
	if (!isClass || fnPath.node.kind !== 'constructor' || varNode !== encloserNode.id) {
		recordVarUse(varNode.name, fnPath, blockPath, true, state);
	}

	fnProps.superVarNode = varNode;
}

function getEncloserVarNode(superPath, encloserPath, encloserNode, blockPath, isClass, state) {
	// If class method, use class name (if not overridden in local scope)
	const {parentPath} = encloserPath;
	if (isClass) {
		assertWithLocation(encloserPath.isClass(), encloserPath, state);
		const idNode = encloserNode.id;
		if (idNode) {
			// Class is named - use class name if not overridden in local scope.
			// NB Need to check for existence of binding, as Babel doesn't populate it in some cases
			// if this constructor has been created (in `classExitVisitor`).
			const binding = superPath.scope.getBinding(idNode.name);
			if (!binding || binding.path === encloserPath) return idNode;
		} else if (parentPath.isVariableDeclarator()) {
			// Class is not named.
			// If class is named implicitly by `var C = class {}` and name not overridden in local scope,
			// name class explicitly and use name.
			const varNode = parentPath.node.id;
			if (t.isIdentifier(varNode) && superPath.scope.getBinding(varNode.name).path === parentPath) {
				encloserNode.id = varNode;
				return varNode;
			}
		}
	}

	// If defined with `const x = ...`, and var not overridden in local scope, use var name
	// (`const` only, so value cannot change)
	if (parentPath.isVariableDeclarator() && parentPath.parentPath.node.kind === 'const') {
		const idNode = parentPath.node.id;
		if (t.isIdentifier(idNode) && superPath.scope.getBinding(idNode.name).path === parentPath) {
			return idNode;
		}
	}

	// Assign to temp var.
	// `{ ... }` -> `temp_0 = { ... }`
	// Class declarations are converted to var declaration
	// `class X { foo() { const X = 1; super.foo() } }`
	// -> `let X = temp_0 = class X { foo() { const X = 1; super.foo() } };`
	const varNode = createTempVarNode(state);
	const tempVarNodes = [varNode];

	let replacementNode = encloserNode,
		tempType = 'assign';
	if (isClass && !encloserNode.id) {
		// Ensure class name is preserved if gained implicitly from assignment
		let idNode,
			keyIsComputed = false,
			accessIsComputed = false;
		if (parentPath.isAssignmentExpression()) {
			if (encloserPath.key === 'right') {
				const parentNode = parentPath.node;
				if (parentNode.operator === '=') {
					const leftNode = parentNode.left;
					if (t.isIdentifier(leftNode)) idNode = leftNode;
				}
			}
		} else if (parentPath.isVariableDeclarator()) {
			if (encloserPath.key === 'init') {
				const assignedToNode = parentPath.node.id;
				if (t.isIdentifier(assignedToNode)) idNode = assignedToNode;
			}
		} else if (parentPath.isProperty()) {
			if (encloserPath.key === 'value') {
				const keyPath = parentPath.get('key'),
					keyNode = keyPath.node;
				keyIsComputed = parentPath.node.computed;

				if (!keyIsComputed) {
					idNode = keyNode;
					accessIsComputed = t.isLiteral(keyNode);
				} else if (t.isLiteral(keyNode)) {
					idNode = keyNode;
					accessIsComputed = true;
				} else {
					// Key is expression.
					// Create temp var to hold key, to prevent expression being evaluated multiple times.
					// `+ ''` is added in case `.toString()` method has side effects,
					// so need to prevent it being called multiple times too.
					// `{[f()]: class {}}` -> `{[temp_2 = fn() + '']: temp_1 = {[temp_2]: class {}}[temp_2]}`
					idNode = createTempVarNode(state);
					tagTempVarWithType(idNode, 'key');

					tempVarNodes.push(idNode);
					accessIsComputed = true;
					keyPath.replaceWith(
						t.assignmentExpression(
							'=',
							idNode,
							t.binaryExpression('+', keyNode, t.stringLiteral(''))
						)
					);
				}
			}
		}

		if (idNode) {
			// Class will be named by assignment
			// `let C = class {};` -> `let C = temp_3 = {C: class {}}.C;`
			// Using object prop to provide class name rather than setting directly, as that
			// would add a variable to scope which could potentially interfere with a var
			// with same name in an upper scope.
			replacementNode = t.memberExpression(
				t.objectExpression([t.objectProperty(idNode, replacementNode, keyIsComputed)]),
				idNode,
				accessIsComputed
			);
			tempType = 'object';
		} else {
			// Class will remain anonymous
			// `class {}` -> `temp_3 = (0, class {})`
			replacementNode = t.sequenceExpression([t.numericLiteral(0), replacementNode]);
			tempType = 'anon';
		}
	}

	replacementNode = t.assignmentExpression('=', varNode, replacementNode);

	// If class declaration, replace with `let ... = ...`.
	// `class X {}` -> `let X = temp_3 = class X {}`
	// Will only happen if var with same name as class name is in scope inside method using `super`.
	if (t.isClassDeclaration(encloserNode)) {
		encloserNode.type = 'ClassExpression';
		replacementNode = t.variableDeclaration(
			'let', [t.variableDeclarator(encloserNode.id, replacementNode)]
		);
		tempType = `let,${tempType}`;
	}

	// Not using Babel's `.replaceWith()` to avoid remaking `path`s
	// which would then lose internal properties set on them
	replaceWith(encloserPath, replacementNode);

	// Create temp vars at start of block (will be inserted in `blockStatementExitVisitor()`)
	tagTempVarWithType(varNode, tempType);
	(blockPath[TEMP_VAR_NODES] || (blockPath[TEMP_VAR_NODES] = [])).push(...tempVarNodes);

	return varNode;
}

/**
 * Visitor to track use of `arguments` which refers to an upper scope.
 * Record the var same as for identifiers, and also record an array of
 * argument names in call to `tracker()`.
 * (only applies inside arrow functions)
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function processArguments(state) {
	const res = processThisOrArguments('arguments', state);
	if (!res) return;

	// Add arguments names to scope objects.
	// When all params are simple vars (i.e. `function(a, b, c) {}`), values of `a` and `arguments[0]`
	// are linked. Setting `a` results in `arguments[0]` also being set to same value + vica versa.
	// If params use default values, destructuring or spreading, they are not linked.
	// So only record `argNames` if all params are simple vars.
	// TODO `arguments` is also not linked to param vars in strict mode functions.
	// TODO Strict mode is automatic in ESM modules - detect this.
	const {scopes, bindingFunctionPath} = res;
	const argNames = [];
	for (const paramNode of bindingFunctionPath.node.params) {
		if (!t.isIdentifier(paramNode)) {
			argNames.length = 0;
			break;
		}
		argNames.push(paramNode.name);
	}

	for (const scope of scopes) {
		if (scope.argNames === undefined) scope.argNames = argNames;
	}
}

/**
 * Find what function a use of `this`/`arguments` derives from.
 * (only applies to arrow functions, where `this` in the arrow function
 * refers to `this` in enclosing function)
 * @param {string} name - Var name (i.e 'this' or 'arguments')
 * @param {Object} state - Babel state object for file
 * @returns {Object|undefined} - Object with props:
 *   {Array<Object>} .scopes - Array of scope objects
 *   {Object} .bindingFunctionPath - Babel path for function where `this`/`arguments derives from
 */
function processThisOrArguments(name, state) {
	// Determine if var is a const
	// TODO `arguments` is a const in strict mode
	const isConst = name === 'this';

	// Find nearest non-arrow function above
	const bindingFunctionPath = state[PARENT_FULL_FUNCTION_PATH],
		functionPath = state[PARENT_FUNCTION_PATH];
	if (!bindingFunctionPath) {
		// If this is code generated in `eval` and `this` / `arguments` is from
		// scope outside `eval`, record var usage
		if (functionPath) {
			const parentVar = state[PARENT_VARS][name];
			if (parentVar) {
				const scopes = recordVarUse(
					name, functionPath, createParentVarBindingBlockPath(parentVar), isConst, state
				);

				const {argNames} = parentVar;
				if (argNames) {
					for (const scope of scopes) {
						if (scope.argNames === undefined) scope.argNames = argNames;
					}
				}
			}
		}

		return;
	}

	// Skip if enclosing function is not arrow function (i.e. `this`/`arguments` is local)
	if (functionPath === bindingFunctionPath) return;

	// Get function's statement block
	const bindingBlockPath = bindingFunctionPath.get('body');
	assertWithLocation(
		bindingBlockPath.isBlockStatement(), bindingBlockPath, state,
		`Unexpected variable binding block type '${bindingBlockPath.node.type}' for var '${name}'`
	);

	// Record variable use
	const scopes = recordVarUse(name, functionPath, bindingBlockPath, isConst, state);

	// Return scopes + bindingFunctionPath (used in `processArguments()`)
	return {scopes, bindingFunctionPath}; // eslint-disable-line consistent-return
}

/**
 * Process `eval`.
 * If it's used standalone (e.g. `(0, eval)()` or `const e = eval`), substitute `livepack_eval`.
 * If it's used as a direct call `eval(x)`, wrap code in `livepack_preval()`, with object containing
 * scope info about all vars in scope.
 * It's impossible to say which vars will be used until the code runs, so need to assume all vars
 * in scope need to be available.
 * @param {Object} evalPath - Babel path object for `eval`
 * @param {Object} state - Babel state object for file
 * @returns {undefined}
 */
function processEval(evalPath, state) {
	// If standalone use of `eval`, substitute `livepack_eval`
	const {parentPath} = evalPath;
	if (!parentPath.isCallExpression() || evalPath.key !== 'callee') {
		const {node} = evalPath;
		node.name = getEvalVarName();
		addComments(node, false, true, {
			type: 'CommentBlock',
			value: EVAL_COMMENT
		});

		addToInternalVars(node, state);
		state[EVAL_IS_USED] = true;
		return;
	}

	// `eval()` call
	// If no arguments, leave as is
	if (parentPath.node.arguments.length === 0) return;

	// Capture all vars accessible to code in `eval()` expression.
	// Works by treating `eval` as if it was an arrow function
	// and acting as if all vars are encountered within it.
	const scopes = new Map();
	evalPath[FUNCTION_PROPS] = {scopes};
	const {[PARENT_FUNCTION_PATH]: functionPath, [IS_STRICT]: isStrict} = state;
	state[PARENT_FUNCTION_PATH] = evalPath;

	const idNode = {name: undefined},
		idPath = {node: idNode, parentPath: evalPath, scope: evalPath.scope};
	function includeVar(varName) {
		// If `eval()` is in strict mode, skip vars which are reserved words in strict mode
		// as they cannot be referenced within the eval - would be a syntax error
		if (isStrict && isReservedWord(varName)) return;
		idNode.name = varName;
		identifierVisitor(idPath, state);
	}

	// Capture all vars in scopes above
	let currentPath = parentPath;
	do {
		for (const varName of Object.keys(currentPath.scope.bindings)) {
			includeVar(varName);
		}
		currentPath = currentPath.parentPath;
	} while (currentPath);

	// Capture `this` + `arguments`
	processThisOrArguments('this', state);
	includeVar('arguments');

	// Capture all vars from parent scopes
	for (const varName of Object.keys(state[PARENT_VARS])) {
		includeVar(varName);
	}

	// Capture `module` + `exports`
	if (state[IS_COMMON_JS]) {
		includeVar('module');
		includeVar('exports');
	}

	// TODO Capture `super`

	state[PARENT_FUNCTION_PATH] = functionPath; // Reset back to previous value

	// Replace `eval(x)` with `eval(livepack_preval(x, [...]))`
	// (or `eval(livepack_preval(x, [...], true))` if strict mode outside eval)
	const firstArgPath = parentPath.get('arguments.0');
	firstArgPath.replaceWith(t.callExpression(
		createPrevalVarNode(state),
		[
			firstArgPath.node,
			t.arrayExpression(
				[...scopes.values()].map((scope) => {
					const {blockName, argNames} = scope;

					let argNamesNode;
					if (argNames) {
						argNamesNode = t.arrayExpression(
							argNames.map(varName => t.stringLiteral(varName))
						);
					}

					return (
						t.arrayExpression([
							t.numericLiteral(scope.blockId),
							scope.scopeIdVarNode,
							blockName ? t.stringLiteral(blockName) : null,
							t.arrayExpression(
								[...scope.varNames].map(varName => t.stringLiteral(varName))
							),
							t.arrayExpression(
								[...scope.constNames].map(varName => t.stringLiteral(varName))
							),
							...(argNamesNode ? [argNamesNode] : [])
						])
					);
				})
			),
			...(state[IS_STRICT] ? [t.booleanLiteral(true)] : [])
		]
	));

	state[EVAL_IS_USED] = true;
}
