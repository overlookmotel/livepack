/* --------------------
 * livepack module
 * Type constants
 * ------------------*/

'use strict';

// Modules
const assert = require('simple-invariant');

// Exports

/* eslint-disable no-bitwise */
const NO_TYPE = 0,
	PRIMITIVE_TYPE = 16,
	STRING_TYPE = PRIMITIVE_TYPE | 0,
	BOOLEAN_TYPE = PRIMITIVE_TYPE | 1,
	NUMBER_TYPE = PRIMITIVE_TYPE | 2,
	BIGINT_TYPE = PRIMITIVE_TYPE | 3,
	NULL_TYPE = PRIMITIVE_TYPE | 4,
	UNDEFINED_TYPE = PRIMITIVE_TYPE | 5,
	NEGATIVE_TYPE = PRIMITIVE_TYPE | 6, // TODO: Should this be a primitive?
	OBJECT_TYPE = 32,
	ARRAY_TYPE = OBJECT_TYPE | 1,
	REGEXP_TYPE = OBJECT_TYPE | 2,
	DATE_TYPE = OBJECT_TYPE | 3,
	SET_TYPE = OBJECT_TYPE | 4,
	MAP_TYPE = OBJECT_TYPE | 5,
	WEAK_SET_TYPE = OBJECT_TYPE | 6,
	WEAK_MAP_TYPE = OBJECT_TYPE | 7,
	URL_TYPE = OBJECT_TYPE | 8,
	URL_SEARCH_PARAMS_TYPE = OBJECT_TYPE | 9,
	BOXED_STRING_TYPE = OBJECT_TYPE | 10,
	BOXED_BOOLEAN_TYPE = OBJECT_TYPE | 11,
	BOXED_NUMBER_TYPE = OBJECT_TYPE | 12,
	BOXED_BIGINT_TYPE = OBJECT_TYPE | 13,
	BOXED_SYMBOL_TYPE = OBJECT_TYPE | 14,
	ARGUMENTS_TYPE = OBJECT_TYPE | 15,
	FUNCTION_TYPE = 64,
	METHOD_TYPE = FUNCTION_TYPE | 1,
	GLOBAL_TYPE = 128,
	GLOBAL_TOP_LEVEL_TYPE = GLOBAL_TYPE | 0,
	GLOBAL_MODULE_TYPE = GLOBAL_TYPE | 1,
	GLOBAL_PROPERTY_TYPE = GLOBAL_TYPE | 2,
	GLOBAL_PROTOTYPE_TYPE = GLOBAL_TYPE | 3,
	GLOBAL_GETTER_TYPE = GLOBAL_TYPE | 4,
	GLOBAL_SETTER_TYPE = GLOBAL_TYPE | 5,
	GLOBAL_MINUS_INFINITY_TYPE = GLOBAL_TYPE | 6,
	SYMBOL_TYPE = 256,
	SYMBOL_FOR_TYPE = SYMBOL_TYPE | 1,
	BUFFER_TYPE = 512,
	TYPED_ARRAY_TYPE = BUFFER_TYPE | 1,
	ARRAY_BUFFER_TYPE = BUFFER_TYPE | 2,
	SHARED_ARRAY_BUFFER_TYPE = BUFFER_TYPE | 3,
	EXPORT_JS_TYPE = 1,
	EXPORT_COMMONJS_TYPE = 2,
	EXPORT_ESM_TYPE = 3,
	EXPORT_EXEC_TYPE = 4;
/* eslint-enable no-bitwise */

const SERIALIZERS = [];

module.exports = {
	NO_TYPE,
	PRIMITIVE_TYPE,
	STRING_TYPE,
	BOOLEAN_TYPE,
	NUMBER_TYPE,
	BIGINT_TYPE,
	NULL_TYPE,
	UNDEFINED_TYPE,
	NEGATIVE_TYPE,
	OBJECT_TYPE,
	ARRAY_TYPE,
	REGEXP_TYPE,
	DATE_TYPE,
	SET_TYPE,
	MAP_TYPE,
	WEAK_SET_TYPE,
	WEAK_MAP_TYPE,
	URL_TYPE,
	URL_SEARCH_PARAMS_TYPE,
	BOXED_STRING_TYPE,
	BOXED_BOOLEAN_TYPE,
	BOXED_NUMBER_TYPE,
	BOXED_BIGINT_TYPE,
	BOXED_SYMBOL_TYPE,
	ARGUMENTS_TYPE,
	FUNCTION_TYPE,
	METHOD_TYPE,
	GLOBAL_TYPE,
	GLOBAL_TOP_LEVEL_TYPE,
	GLOBAL_MODULE_TYPE,
	GLOBAL_PROPERTY_TYPE,
	GLOBAL_PROTOTYPE_TYPE,
	GLOBAL_GETTER_TYPE,
	GLOBAL_SETTER_TYPE,
	GLOBAL_MINUS_INFINITY_TYPE,
	SYMBOL_TYPE,
	SYMBOL_FOR_TYPE,
	BUFFER_TYPE,
	TYPED_ARRAY_TYPE,
	ARRAY_BUFFER_TYPE,
	SHARED_ARRAY_BUFFER_TYPE,
	EXPORT_JS_TYPE,
	EXPORT_COMMONJS_TYPE,
	EXPORT_ESM_TYPE,
	EXPORT_EXEC_TYPE,
	SERIALIZERS,
	registerSerializer
};

/**
 * Register serializer function for a type.
 * @param {number} type - Type ID
 * @param {Function} serializer - Serializer function for type
 * @returns {undefined}
 */
function registerSerializer(type, serializer) {
	assert(!SERIALIZERS[type], `Multiple serializers for type ID ${type}`);
	while (SERIALIZERS.length < type) SERIALIZERS.push(undefined);
	SERIALIZERS[type] = serializer;
}
